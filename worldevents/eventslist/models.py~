from mongoengine.queryset import QuerySet
from mongoengine import *
from django.conf import settings
from eventslist.managers import EventManager

import datetime

connect('worldevents')

class Comment(EmbeddedDocument):
   content = StringField()
   user = StringField() 
   added_date = DateTimeField(default=datetime.datetime.now)	 

   def __str__(self):
      return self.content	


class Event(Document):
   
   title = StringField(max_length = 64)
   photo = StringField(max_length = 64)
   location = PointField()
   description = StringField()
   category = StringField()
   added_date = DateTimeField(default=datetime.datetime.now)
   comments = ListField(EmbeddedDocumentField(Comment))	
   user = StringField()

   @queryset_manager
   def search(doc_cls, queryset,title,category,lat,lng,distance,size):
      	    if title and category:
		return queryset(Q(location__geo_within_sphere=[(float(lat),float(lng)),float(distance)/6371]) & Q(title__icontains=title) & Q(category=category)).order_by('-added_date')[:size]
		
	    elif title and not category:
		return queryset(Q(location__geo_within_sphere=[(float(lat),float(lng)),float(distance)/6371]) & Q(title__icontains=title)).order_by('-added_date')[:size]

	    elif not title and category:
		return queryset(Q(location__geo_within_sphere=[(float(lat),float(lng)),float(distance)/6371]) & Q(category=category)).order_by('-added_date')[:size]

	    elif not title and not category:
	       return queryset(Q(location__geo_within_sphere=[(float(lat),float(lng)),float(distance)/6371])).order_by('-added_date')[:size] 
        
      
   def __str__(self):
      return self.title +'-'+str(self.location['coordinates'][0])+str(self.location['coordinates'][1])+'-'+self.description +'-'+self.category

   meta = {'collection':'event'}


class Category(Document):
   name = StringField(max_length = 64, required = True, unique = True)
   
   def __str__(self):
      return self.name
   
   meta = {'collection':'category'}
